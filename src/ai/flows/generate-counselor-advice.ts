'use server';

/**
 * @fileOverview An AI flow for generating relationship advice based on chat history.
 *
 * - generateCounselorAdvice - A function that takes chat history as input and returns relationship advice.
 * - GenerateCounselorAdviceInput - The input type for the generateCounselorAdvice function.
 * - GenerateCounselorAdviceOutput - The return type for the generateCounselorAdvice function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateCounselorAdviceInputSchema = z.object({
  chatHistory: z
    .string()
    .describe('The complete chat history between the two users.'),
});
export type GenerateCounselorAdviceInput = z.infer<typeof GenerateCounselorAdviceInputSchema>;

const GenerateCounselorAdviceOutputSchema = z.object({
  advice: z.string().describe('The relationship advice generated by the AI.'),
});
export type GenerateCounselorAdviceOutput = z.infer<typeof GenerateCounselorAdviceOutputSchema>;

export async function generateCounselorAdvice(
  input: GenerateCounselorAdviceInput
): Promise<GenerateCounselorAdviceOutput> {
  return generateCounselorAdviceFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateCounselorAdvicePrompt',
  input: {schema: GenerateCounselorAdviceInputSchema},
  output: {schema: GenerateCounselorAdviceOutputSchema},
  prompt: `You are an experienced marriage counselor. Based on the following chat history between two users, provide personalized relationship advice. Focus on actionable insights and guidance.

Chat History:
{{{chatHistory}}}`,
});

const generateCounselorAdviceFlow = ai.defineFlow(
  {
    name: 'generateCounselorAdviceFlow',
    inputSchema: GenerateCounselorAdviceInputSchema,
    outputSchema: GenerateCounselorAdviceOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
